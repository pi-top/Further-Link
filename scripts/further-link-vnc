#!/bin/bash
###############################################################
#                Unofficial 'Bash strict mode'                #
# http://redsymbol.net/articles/unofficial-bash-strict-mode/  #
###############################################################
set -euo pipefail
IFS=$'\n\t'
###############################################################


do_start() {
    # Start virtual display
    echo "Starting virtual display ${VIRTUAL_DISPLAY_ID}..."
    Xvfb ":${VIRTUAL_DISPLAY_ID}" -screen 1 480x640x16 &
    echo "Xvfb PID is $!"
    PIDS="$!"

    echo "Starting x11vnc using port ${VNC_PORT}..."
    x11vnc -rfbport "${VNC_PORT}"  -bg -forever -shared -display ":${VIRTUAL_DISPLAY_ID}" -nopw -ncache
    echo "x11vnc PID is $!"
    PIDS+=("$!")

    echo "Starting novnc server using http port ${HTTP_PORT}..."
    novnc_command="/usr/share/novnc/utils/launch.sh  --listen ${HTTP_PORT} --vnc localhost:${VNC_PORT}"
    if [ -f "${SSL_CERT}" ]; then
        echo "Using certificate in ${SSL_CERT}"
        novnc_command+=" --cert ${SSL_CERT}"
    fi
    novnc_command+=" &"
    eval "${novnc_command}"

    echo "novnc PID is $!"
    PIDS+=("$!")

    echo "Storing PIDs into ${PIDS_FILE}"
    printf "%s\n" "${PIDS[@]}" > "${PIDS_FILE}"
}


do_stop() {
    if [ -f "${PIDS_FILE}" ]; then
        # Kill PIDs of processes associated with VIRTUAL_DISPLAY_ID
        echo "Found PIDs file ${PIDS_FILE}"
        while read PID ; do
            echo "Killing PID ${PID}..."
            kill -9 "${PID}" || true
        done < "${PIDS_FILE}"

        echo "Removing ${PIDS_FILE}"
        rm -r "${PIDS_FILE}"
    else
        echo "No PID file for display ${VIRTUAL_DISPLAY_ID}, skipping..."
    fi
}


get_url() {
    echo "http://pi-top.local:${HTTP_PORT}/vnc.html?autoconnect=true"
}


if [ "$#" -gt "4" ]; then
    echo -e "Usage:\n\tfurther-link-vnc <COMMAND> <DISPLAY_ID> <SSL_CERTIFICATE>"
    echo "where:"
    echo -e "\tCOMMAND: start, stop, url."
    echo -e "\tDISPLAY_ID: integer, id for the virtual display to create."
    echo -e "\tSSL_CERTIFICATE: path to combined cert/key file. Optional."
    exit 1
fi


COMMAND="${1}"

# Pad display id to have 3 digits
VIRTUAL_DISPLAY_ID=$(printf "%03d" ${2})

SSL_CERT=""
if [ "$#" -ge "3" ]; then
    SSL_CERT="${3}"
fi

VNC_PORT="40${VIRTUAL_DISPLAY_ID}"
HTTP_PORT="60${VIRTUAL_DISPLAY_ID}"
PIDS_FILE="/tmp/.further-link-vnc.${VIRTUAL_DISPLAY_ID}.pid"


case "${COMMAND}" in
    start)
        do_start
        ;;
    stop)
        do_stop
        ;;
    url)
        get_url
        ;;
    *)
        echo "Unknown argument \`${1}'" >&2
        exit 1
        ;;
esac
